package oracle.apps.ak.tickets.server;

import com.sun.java.util.collections.HashMap;

import java.sql.SQLException;

import java.text.SimpleDateFormat;

import oracle.apps.ak.practice.server.practiceVOImpl;
import oracle.apps.ak.practice.server.practiceVORowImpl;

import oracle.jbo.domain.Number;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.webui.OAPageContext;
import oracle.apps.fnd.framework.webui.beans.OAWebBean;
import oracle.apps.fnd.framework.webui.beans.message.OAMessageStyledTextBean;

import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;

import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleTypes;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ticketAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public ticketAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("oracle.apps.ak.tickets.server", /* package name */
      "ticketAMLocal" /* Configuration Name */);
    }


    public void init(){
        loginVOImpl loginVO=(loginVOImpl)this.getloginVO1();
        loginVO.executeQuery();
        System.out.println(loginVO.getQuery());
        System.out.println(loginVO.getRowCount());
    }
    //登录验证
    public HashMap login(HashMap parameters){
    
        System.out.println("am login");
        String userName=(String)parameters.get("userName");
        String userPassword=(String)parameters.get("userPassword");
        System.out.println(userName+"+input+"+userPassword);
        //loginVOImpl loginVO=(loginVOImpl)this.getloginVO1();
        OAViewObject loginVO=(loginVOImpl)this.getloginVO1();
        loginVORowImpl row=null;
         
        int fetchedRowCount=loginVO.getRowCount();
        RowSetIterator deleteIter=loginVO.createRowSetIterator("deleteIter");
        System.out.println("fetchedRowCount="+fetchedRowCount);//这里始终是0说明错误了
        if(fetchedRowCount>0) {
            System.out.println("execute charge1");
            deleteIter.setRangeStart(0);
            deleteIter.setRangeSize(fetchedRowCount);
            for(int i=0;i<fetchedRowCount;i++) {
                System.out.println("execute xunhuan");
                row=(loginVORowImpl)deleteIter.getRowAtRangeIndex(i);
                String username=row.getLoginnum();
                System.out.println("username="+username);
                //用户名在数据库中存在
                if(username.compareTo(userName)==0) {
                //判断密码是否正确
                    String userpassword=row.getLoginpassword();
                    if(userpassword.compareTo(userPassword)==0){
                        //int indent=(int)row.getIdent();
                        String idCustomer=row.getIdnum().intValue()+"";
                        HashMap parameter=new HashMap();
                        parameter.put("idCustomer",idCustomer);
                        parameter.put("nameCustomer",row.getEname());
                        return parameter;
                    }
                    
                }
            }
        }
        deleteIter.closeRowSetIterator();
        return null;//返回-1表示不存在这个账号密码匹配、
    }

    //查询出符合顾客要求的车次信息
    public void query(HashMap parameters ){
        //System.out.println("am query");
        int countRow=0;//用于统计数据库中符合条件的信息的条数
        String placeOfDeparture=(String)parameters.get("placeOfDeparture");
        String placeOfDestination=(String)parameters.get("placeOfDestination");
        String timePlan=(String)parameters.get("timePlan");
        String nameCustomer=(String)parameters.get("nameCustomer");
        String idCustomer=(String)parameters.get("idCustomer");
        String idNumChange=(String)parameters.get("idNumChange");
        String idTrainChange=(String)parameters.get("idTrainChange");
        String startStationChange=(String)parameters.get("startStationChange");
        String endStationChange=(String)parameters.get("endStationChange");
        String seatClassChange=(String)parameters.get("seatClassChange");
        System.out.println(placeOfDeparture+"+input+"+placeOfDestination+" "+timePlan);
        
        trainVOImpl trainVO=this.gettrainVO1();
        String whereClause=" 1=1 ";
        System.out.println("condition go");
        whereClause+=" AND YMD = '"+timePlan+ "' ";
        trainVO.executeQueryPara(whereClause);
        //System.out.println(trainVO.getQuery());
        int fetchedRowCountAfter=trainVO.getFetchedRowCount();
        //System.out.println("fetchedRowCountAfter= "+fetchedRowCountAfter);
        int rowCountAfter=trainVO.getRowCount();
        System.out.println("rowCountAfter= "+rowCountAfter);
       
        RowSetIterator deleteIter=trainVO.createRowSetIterator("deleteIter");
        trainVORowImpl row=null;
        if(rowCountAfter>0) {
            System.out.println("execute charge1");
            deleteIter.setRangeStart(0);
            deleteIter.setRangeSize(rowCountAfter);
            for(int i=0;i<rowCountAfter;i++) {
                System.out.println("execute xunhuan");
                row=(trainVORowImpl)deleteIter.getRowAtRangeIndex(i);
                
                
                //获得高铁会经过的站台
                String onePlace=row.getOneplace();
                String twoPlace=row.getTwoplace();
                String threePlace=row.getThreeplace();
                String forePlace=row.getForeplace();
                String fivePlace=row.getFiveplace();
                String sixPlace=row.getSixplace();
                String place[]={onePlace,twoPlace,threePlace,forePlace,fivePlace,sixPlace};
                //获得每一段二等座的价格
                int onePrice=0;
                int twoPrice=0;
                int threePrice=0;
                int fourPrice=0;
                int fivePrice=0;
                if(row.getPricesecondofonepart()!=null){
                    onePrice=row.getPricesecondofonepart().intValue();
                }
                if(row.getPricesecondoftwopart()!=null){
                    twoPrice=row.getPricesecondoftwopart().intValue();
                }
                if(row.getPricesecondofthreepart()!=null){
                    threePrice=row.getPricesecondofthreepart().intValue();
                }
                if(row.getPricesecondofforepart()!=null){
                    fourPrice=row.getPricesecondofforepart().intValue();
                }
                if(row.getPricesecondoffivepart()!=null){
                    fivePrice=row.getPricesecondoffivepart().intValue();
                }
                
                int priceTwoClass[]={onePrice,twoPrice,threePrice,fourPrice,fivePrice};
                //获得在每一个站点的时间
                Date oneTime=row.getTimeoneplace();
                Date twoTime=row.getTimetwoplace();
                Date threeTime=row.getTimethreeplace();
                Date foreTime=row.getTimeforeplace();
                Date fiveTime=row.getTimefiveplace();
                Date sixTime=row.getTimesixplace();
                Date time[]={oneTime,twoTime,threeTime,foreTime,fiveTime,sixTime};
                System.out.println("the name of every place="+onePlace+twoPlace+threePlace+forePlace+fivePlace+sixPlace);
                for(int a=0;a<6;a++) {
                    //当前高铁上找到出发点站
                    if(place[a]!=null&&placeOfDeparture.compareTo(place[a])==0) {
                        for(int b=a+1;b<6;b++){
                            //当前高铁上找到目的站说明这条高铁符合条件
                            if(place[b]!=null&&placeOfDestination.compareTo(place[b])==0){
                             countRow++;//统计行数
                             System.out.println("sdfsdfsdfsfweeeeeeeeeeeeee= "+i);
                            //开始计算运行时间
                             String timeOfTrain="stoped";
                             try{
                                 SimpleDateFormat dfs = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

                                 java.util.Date begin=new java.util.Date(time[a].timestampValue().getTime());

                                 java.util.Date end = new java.util.Date(time[b].timestampValue().getTime());

                                 long between=(end.getTime()-begin.getTime())/1000;//除以1000是为了转换成秒

                                 long day1=between/(24*3600);

                                 long hour1=between%(24*3600)/3600;

                                 long minute1=between%3600/60;

                                 long second1=between%60/60;
                                 
                                 timeOfTrain=hour1+" hour "+minute1+" minute ";
                                 System.out.println(""+day1+"day "+hour1+"hour:"+minute1+"minute");
                                 //用户名在数据库中存在
                             }
                             catch(Exception e){
                                 
                             }
                            //开始计算二等座的价格
                            int price=0;
                            for(int p=a;p<b;p++) {
                                price=price+priceTwoClass[p];
                            }
                            System.out.println("enter double cycle"+row.getTimeoneplace());
                            System.out.println("price="+price+":"+a+" "+b);
                            
                            //根据判断得到的数据显示到table中

                            String price2 = price +"";
                            row.setStartplace(placeOfDeparture);
                            row.setDestinationplace(placeOfDestination);
                            row.setStarttime(time[a].toString());
                            row.setEndtime(time[b].toString());
                            row.setAlltime(timeOfTrain);
                            row.setPrice(price2 );
                            //System.out.println("this is idCustomer of AM="+idCustomer);
                            row.setNamecustomer(nameCustomer);
                            row.setIdcustomer(idCustomer);
                            row.setIdnumchange(idNumChange);
                            row.setIdtrainchange(idTrainChange);
                            row.setStartstationchange(startStationChange);
                            row.setEndstationchange(endStationChange);
                            row.setSeatclasschange(seatClassChange);
                            break;
                            }
                        }
                    }
                }
                    
            }
        }
        trainVORowImpl row3=null;
        row=(trainVORowImpl)deleteIter.getRowAtRangeIndex(0);
        System.out.println("nanananananan11= "+row.getTrainname());
        row3=(trainVORowImpl)deleteIter.getRowAtRangeIndex(1);
        System.out.println("nanananananan11= "+row.getTrainname());
        row=(trainVORowImpl)deleteIter.getRowAtRangeIndex(3);
        if(row==null){
            System.out.println("this is null");
        }
        trainVORowImpl []row2=new trainVORowImpl[50];
        int still=0;
        for(int c2=0;c2<countRow;c2++){
            for(int k2=still;k2<rowCountAfter;k2++){
                row=(trainVORowImpl)deleteIter.getRowAtRangeIndex(k2);
                if(row!=null) {
                    //System.out.println(k2+" ci shu "+row.getTrainname());
                    row2[c2]=row;
                    //System.out.println(k2+" ci shu "+row2[c2].getTrainname());
                    still=k2+1;
                    break;
                }
            }
        }
        String whereClause2=" 1=1 ";
        //System.out.println("condition go");
        whereClause2+=" AND ROWNUM <= '"+countRow+ "' ";
        trainVO.executeQueryPara(whereClause2);
        trainVO.setRangeStart(0);
        trainVO.setRangeSize(countRow);
        
    
   
       int x  = trainVO.getRowCount();
     //System.out.println(trainVO.getQuery());
       for(int c=0; c < countRow;c++){
           row = (trainVORowImpl)   trainVO.getRowAtRangeIndex(c);
           //System.out.println(c+" xunhuan li de ccheci = "+row2[c].getTrainname());
           row.setTrainname(row2[c].getTrainname());
           row.setStartplace(row2[c].getStartplace());
           row.setDestinationplace(row2[c].getDestinationplace());
           row.setStarttime(row2[c].getStarttime());
           row.setEndtime(row2[c].getEndtime());
           row.setAlltime(row2[c].getAlltime());
           row.setPrice(row2[c].getPrice() );
           row.setNamecustomer(row2[c].getNamecustomer());
           row.setIdcustomer(row2[c].getIdcustomer());
           row.setIdnumchange(row2[c].getIdnumchange());
           row.setIdtrainchange(row2[c].getIdtrainchange());
           row.setStartstationchange(row2[c].getStartstationchange());
           row.setEndstationchange(row2[c].getEndstationchange());
           row.setSeatclasschange(row2[c].getSeatclasschange());
       }
       deleteIter.closeRowSetIterator();
  
    }
    
    //查询出被选择车辆的座位详细信息，包括座位价格，座位类型
    public void detail(HashMap parameters){
        //System.out.println("am detail");
        String idNum=(String)parameters.get("idNum");
        String startStation=(String)parameters.get("startStation");
        String endStation=(String)parameters.get("endStation");
        
        //对序号的VO进行初始化查询
//        seatSortVOImpl seatSortVO=(seatSortVOImpl)this.getseatSortVO1();
//        seatSortVO.executeQuery();
        
        String whereClause=" 1=1 ";
        whereClause+=" AND idNum =  '"+idNum+ "' "; 
        trainVOImpl trainVO=(trainVOImpl)this.gettrainVO1();
        trainVO.executeQueryPara(whereClause);
        //System.out.println("the second query:"+trainVO.getQuery());
        
        //通过getCurrentRow()没有获取到当前行，但是查询语句却能查询到一条数据
        //trainVORowImpl row=(trainVORowImpl)trainVO.getCurrentRow();
        int fetchedRowCountAfter=trainVO.getFetchedRowCount();
        //getFetchedRowCount()也没有获取到行数信息，可能这跟getCurrentRow()适用情况是一样的
        //System.out.println("fetchedRowCountAfter2= "+fetchedRowCountAfter);
        int rowCountAfter=trainVO.getRowCount();
        //System.out.println("rowCountAfter2= "+rowCountAfter);
        
        RowSetIterator deleteIter=trainVO.createRowSetIterator("deleteIter");
        trainVORowImpl row=null;
        if(rowCountAfter>0) {
            //System.out.println("execute charge1");
            deleteIter.setRangeStart(0);
            deleteIter.setRangeSize(rowCountAfter);
            for(int i=0;i<rowCountAfter;i++) {
                //System.out.println("execute xunhuan");
                row=(trainVORowImpl)deleteIter.getRowAtRangeIndex(i);
                
                 //获得高铁会经过的站台
                 String onePlace=row.getOneplace();
                 String twoPlace=row.getTwoplace();
                 String threePlace=row.getThreeplace();
                 String forePlace=row.getForeplace();
                 String fivePlace=row.getFiveplace();
                 String sixPlace=row.getSixplace();
                 String place[]={onePlace,twoPlace,threePlace,forePlace,fivePlace,sixPlace};
                
                //获得二等座每一段的座位数量
                 int oneSecondSeat=0;
                 int twoSecondSeat=0;
                 int threeSecondSeat=0;
                 int fourSecondSeat=0;
                 int fiveSecondSeat=0;
                 if(row.getOnesecondclassseat()!=null){
                     oneSecondSeat=row.getOnesecondclassseat().intValue();
                 }
                 if(row.getTwosecondclassseat()!=null){
                     twoSecondSeat=row.getTwosecondclassseat().intValue();
                 }
                 if(row.getThreesecondclassseat()!=null){
                     threeSecondSeat=row.getThreesecondclassseat().intValue();
                 }
                 if(row.getForesecondclassseat()!=null){
                     fourSecondSeat=row.getForesecondclassseat().intValue();
                 }
                 if(row.getFivesecondclassseat()!=null){
                     fiveSecondSeat=row.getFivesecondclassseat().intValue();
                 }
                 int numberSecondSeat[]={oneSecondSeat,twoSecondSeat,threeSecondSeat,fourSecondSeat,fiveSecondSeat};
                 
                //获得一等座每一段的座位数量
                 int oneFirstSeat=0;
                 int twoFirstSeat=0;
                 int threeFirstSeat=0;
                 int fourFirstSeat=0;
                 int fiveFirstSeat=0;
                 if(row.getOnefirstclassseat()!=null){
                     oneFirstSeat=row.getOnefirstclassseat().intValue();
                 }
                 if(row.getTwofirstclassseat()!=null){
                     twoFirstSeat=row.getTwofirstclassseat().intValue();
                 }
                 if(row.getThreefirstclassseat()!=null){
                     threeFirstSeat=row.getThreefirstclassseat().intValue();
                 }
                 if(row.getForefirstclassseat()!=null){
                     fourFirstSeat=row.getForefirstclassseat().intValue();
                 }
                 if(row.getFivefirstclassseat()!=null){
                     fiveFirstSeat=row.getFivefirstclassseat().intValue();
                 }
                 int numberFirstSeat[]={oneFirstSeat,twoFirstSeat,threeFirstSeat,fourFirstSeat,fiveFirstSeat};
                 
                //获得商务座每一段的座位数量
                 int oneBusinessSeat=0;
                 int twoBusinessSeat=0;
                 int threeBusinessSeat=0;
                 int fourBusinessSeat=0;
                 int fiveBusinessSeat=0;
                 if(row.getOnebusinessclassseat()!=null){
                     oneBusinessSeat=row.getOnebusinessclassseat().intValue();
                 }
                 if(row.getTwobusinessclassseat()!=null){
                     twoBusinessSeat=row.getTwobusinessclassseat().intValue();
                 }
                 if(row.getThreebusinessclassseat()!=null){
                     threeBusinessSeat=row.getThreebusinessclassseat().intValue();
                 }
                 if(row.getForebusinessclassseat()!=null){
                     fourBusinessSeat=row.getForebusinessclassseat().intValue();
                 }
                 if(row.getFivebusinessclassseat()!=null){
                     fiveBusinessSeat=row.getFivebusinessclassseat().intValue();
                 }
                 int numberBusinessSeat[]={oneBusinessSeat,twoBusinessSeat,threeBusinessSeat,fourBusinessSeat,fiveBusinessSeat};
                 
                //获得每一段二等座的价格
                int onePrice=0;
                int twoPrice=0;
                int threePrice=0;
                int fourPrice=0;
                int fivePrice=0;
                if(row.getPricesecondofonepart()!=null){
                    onePrice=row.getPricesecondofonepart().intValue();
                }
                if(row.getPricesecondoftwopart()!=null){
                    twoPrice=row.getPricesecondoftwopart().intValue();
                }
                if(row.getPricesecondofthreepart()!=null){
                    threePrice=row.getPricesecondofthreepart().intValue();
                }
                if(row.getPricesecondofforepart()!=null){
                    fourPrice=row.getPricesecondofforepart().intValue();
                }
                if(row.getPricesecondoffivepart()!=null){
                    fivePrice=row.getPricesecondoffivepart().intValue();
                }
                
                int priceTwoClass[]={onePrice,twoPrice,threePrice,fourPrice,fivePrice};
                
                //获得每一段一等座的价格
                int oneFirstPrice=0;
                int twoFirstPrice=0;
                int threeFirstPrice=0;
                int fourFirstPrice=0;
                int fiveFirstPrice=0;
                if(row.getPricefirstofonepart()!=null){
                    oneFirstPrice=row.getPricefirstofonepart().intValue();
                }
                if(row.getPricefirstoftwopart()!=null){
                    twoFirstPrice=row.getPricefirstoftwopart().intValue();
                }
                if(row.getPricefirstofthreepart()!=null){
                    threeFirstPrice=row.getPricefirstofthreepart().intValue();
                }
                if(row.getPricefirstofforepart()!=null){
                    fourFirstPrice=row.getPricefirstofforepart().intValue();
                }
                if(row.getPricefirstoffivepart()!=null){
                    fiveFirstPrice=row.getPricefirstoffivepart().intValue();
                }
                
                int priceFirstClass[]={oneFirstPrice,twoFirstPrice,threeFirstPrice,fourFirstPrice,fiveFirstPrice};
                
                //获得每一段商务座的价格
                int oneBusinessPrice=0;
                int twoBusinessPrice=0;
                int threeBusinessPrice=0;
                int fourBusinessPrice=0;
                int fiveBusinessPrice=0;
                if(row.getPricebusinessofonepart()!=null){
                    oneBusinessPrice=row.getPricebusinessofonepart().intValue();
                }
                if(row.getPricebusinessoftwopart()!=null){
                    twoBusinessPrice=row.getPricebusinessoftwopart().intValue();
                }
                if(row.getPricebusinessofthreepart()!=null){
                    threeBusinessPrice=row.getPricebusinessofthreepart().intValue();
                }
                if(row.getPricebusinessofforepart()!=null){
                    fourBusinessPrice=row.getPricebusinessofforepart().intValue();
                }
                if(row.getPricebusinessoffivepart()!=null){
                    fiveBusinessPrice=row.getPricebusinessoffivepart().intValue();
                }
                
                int priceBusinessClass[]={oneBusinessPrice,twoBusinessPrice,threeBusinessPrice,fourBusinessPrice,fiveBusinessPrice};
                for(int a=0;a<6;a++) {
                    //System.out.println("dunhuan = "+startStation+ "+"+endStation);
                    //当前高铁上找到出发点站
                    if(place[a]!=null&&startStation.compareTo(place[a])==0) {
                        //System.out.println("enter startStation="+a);
                        for(int b=a+1;b<6;b++){
                            //System.out.println("xunhuan = ");
                            //当前高铁上找到目的站说明这条高铁符合条件
                            if(place[b]!=null&&endStation.compareTo(place[b])==0){
                                //System.out.println("enter endStation");
                            //找出出发站到终点站这段路中某一段二座位座位数最少的数量
                            int minSecondSeat=numberSecondSeat[a];//代表二等座某一段最少座位的数量
                            for(int nu=a;nu<b;nu++) {
                                if(numberSecondSeat[nu]<minSecondSeat){
                                    minSecondSeat=numberSecondSeat[nu];
                                }
                                
                            }
                            //System.out.println("the number of second Seat="+minSecondSeat);
                            //找出出发站到终点站这段路中某一段一座位座位数最少的数量
                            int minFirstSeat=numberFirstSeat[a];//代表一等座某一段最少座位的数量
                            for(int nu1=a;nu1<b;nu1++) {
                                if(numberFirstSeat[nu1]<minFirstSeat){
                                    minFirstSeat=numberFirstSeat[nu1];
                                }
                                
                            }
                                //System.out.println("the number of first Seat="+minFirstSeat);
                            //找出出发站到终点站这段路中某一段商务座座位数最少的数量
                            int minBusinessSeat=numberBusinessSeat[a];//代表商务座某一段最少座位的数量
                            for(int nu2=a;nu2<b;nu2++) {
                                if(numberBusinessSeat[nu2]<minBusinessSeat){
                                    minBusinessSeat=numberBusinessSeat[nu2];
                                }
                                
                            }
                            
                            //System.out.println("the number of business Seat="+minBusinessSeat);
                            //开始计算二等座的价格
                            int price=0;
                            for(int p=a;p<b;p++) {
                                price=price+priceTwoClass[p];
                            }
                            //System.out.println("the price of second Seat="+price);
                            //开始计算一等座的价格
                            int price1=0;
                            for(int p1=a;p1<b;p1++) {
                                price1=price1+priceFirstClass[p1];
                            }
                            //System.out.println("the price of first Seat="+price1);
                            //开始计算商务座的价格
                            int price2=0;
                            for(int p2=a;p2<b;p2++) {
                                price2=price2+priceBusinessClass[p2];
                            }
                            //System.out.println("the price of business Seat="+price2);
                        
                            
                            //根据判断得到的数据显示到table中

                             whereClause=" 1=1 ";
                             whereClause+=" AND numberColumn in(1,2,3) "; 
                             trainVO.executeQueryPara(whereClause);
                                trainVO.setRangeStart(0);
                                trainVO.setRangeSize(3);
                                
                            
                           
                               int x  = trainVO.getRowCount();
                             //System.out.println(trainVO.getQuery());
                            for(int c=1; c <= x;c++){
                                row = (trainVORowImpl)   trainVO.getRowAtRangeIndex(c-1);
                                //System.out.println("row Id :"+row.getIdnum());
                                if(c==1) {
                                    String minSecondSeat2=minSecondSeat+""; 
                                    String priceTwo=price+"";
                                    row.setSortseat("二等座");
                                    row.setPricethree(priceTwo);
                                    row.setCountseat(minSecondSeat2);
                                    
                                    //System.out.println(minSecondSeat2+"="+priceTwo);
                                }
                                if(c==2){
                                    String minFirstSeat2=minFirstSeat+""; 
                                    String priceOne=price1+"";
                                    row.setSortseat("一等座");
                                    row.setPricethree(priceOne);
                                    row.setCountseat(minFirstSeat2);
                                }
                                if(c==3){
                                    String minBusinessSeat2=minBusinessSeat+""; 
                                    String priceBusi=price2+"";
                                    row.setSortseat("商务座");
                                    row.setPricethree(priceBusi);
                                    row.setCountseat(minBusinessSeat2);
                                }
                            }
                                break;
                            }
                            
                        }
                            
                            }
                        }         
            }
        }
        //row=(trainVORowImpl)trainVO.getCurrentRow();
        //System.out.println(" data of the row:"+row);
    }
    
    //减少被购买座位的车票数量
    public void purchaseTicket(HashMap parameters){
        String idNum=(String)parameters.get("idOfTrain");
        String startStation=(String)parameters.get("startStation");
        String endStation=(String)parameters.get("endStation");
        String serial=(String)parameters.get("serial");
        
        //获取选中车次信息
        String whereClause=" 1=1 ";
        whereClause+=" AND idNum =  '"+idNum+ "' "; 
        trainVOImpl trainVO=(trainVOImpl)this.gettrainVO1();
        trainVO.executeQueryPara(whereClause);
        //System.out.println("the second query:"+trainVO.getQuery());
        
        //通过getCurrentRow()没有获取到当前行，但是查询语句却能查询到一条数据
        //trainVORowImpl row=(trainVORowImpl)trainVO.getCurrentRow();
        int fetchedRowCountAfter=trainVO.getFetchedRowCount();
        //getFetchedRowCount()也没有获取到行数信息，可能这跟getCurrentRow()适用情况是一样的
        //System.out.println("fetchedRowCountAfter2= "+fetchedRowCountAfter);
        int rowCountAfter=trainVO.getRowCount();
        //System.out.println("rowCountAfter2= "+rowCountAfter);
        
        RowSetIterator deleteIter=trainVO.createRowSetIterator("deleteIter");
        trainVORowImpl row=null;
        if(rowCountAfter>0) {
            //System.out.println("execute charge1");
            deleteIter.setRangeStart(0);
            deleteIter.setRangeSize(rowCountAfter);
            for(int i=0;i<rowCountAfter;i++) {
                //System.out.println("execute xunhuan");
                row=(trainVORowImpl)deleteIter.getRowAtRangeIndex(i);
                
                 //获得高铁会经过的站台
                 String onePlace=row.getOneplace();
                 String twoPlace=row.getTwoplace();
                 String threePlace=row.getThreeplace();
                 String forePlace=row.getForeplace();
                 String fivePlace=row.getFiveplace();
                 String sixPlace=row.getSixplace();
                 String place[]={onePlace,twoPlace,threePlace,forePlace,fivePlace,sixPlace};
                
                //获得二等座每一段的座位数量
                 int oneSecondSeat=0;
                 int twoSecondSeat=0;
                 int threeSecondSeat=0;
                 int fourSecondSeat=0;
                 int fiveSecondSeat=0;
                 if(row.getOnesecondclassseat()!=null){
                     oneSecondSeat=row.getOnesecondclassseat().intValue();
                 }
                 if(row.getTwosecondclassseat()!=null){
                     twoSecondSeat=row.getTwosecondclassseat().intValue();
                 }
                 if(row.getThreesecondclassseat()!=null){
                     threeSecondSeat=row.getThreesecondclassseat().intValue();
                 }
                 if(row.getForesecondclassseat()!=null){
                     fourSecondSeat=row.getForesecondclassseat().intValue();
                 }
                 if(row.getFivesecondclassseat()!=null){
                     fiveSecondSeat=row.getFivesecondclassseat().intValue();
                 }
                 int numberSecondSeat[]={oneSecondSeat,twoSecondSeat,threeSecondSeat,fourSecondSeat,fiveSecondSeat};
                 
                //获得一等座每一段的座位数量
                 int oneFirstSeat=0;
                 int twoFirstSeat=0;
                 int threeFirstSeat=0;
                 int fourFirstSeat=0;
                 int fiveFirstSeat=0;
                 if(row.getOnefirstclassseat()!=null){
                     oneFirstSeat=row.getOnefirstclassseat().intValue();
                 }
                 if(row.getTwofirstclassseat()!=null){
                     twoFirstSeat=row.getTwofirstclassseat().intValue();
                 }
                 if(row.getThreefirstclassseat()!=null){
                     threeFirstSeat=row.getThreefirstclassseat().intValue();
                 }
                 if(row.getForefirstclassseat()!=null){
                     fourFirstSeat=row.getForefirstclassseat().intValue();
                 }
                 if(row.getFivefirstclassseat()!=null){
                     fiveFirstSeat=row.getFivefirstclassseat().intValue();
                 }
                 int numberFirstSeat[]={oneFirstSeat,twoFirstSeat,threeFirstSeat,fourFirstSeat,fiveFirstSeat};
                 
                //获得商务座每一段的座位数量
                 int oneBusinessSeat=0;
                 int twoBusinessSeat=0;
                 int threeBusinessSeat=0;
                 int fourBusinessSeat=0;
                 int fiveBusinessSeat=0;
                 if(row.getOnebusinessclassseat()!=null){
                     oneBusinessSeat=row.getOnebusinessclassseat().intValue();
                 }
                 if(row.getTwobusinessclassseat()!=null){
                     twoBusinessSeat=row.getTwobusinessclassseat().intValue();
                 }
                 if(row.getThreebusinessclassseat()!=null){
                     threeBusinessSeat=row.getThreebusinessclassseat().intValue();
                 }
                 if(row.getForebusinessclassseat()!=null){
                     fourBusinessSeat=row.getForebusinessclassseat().intValue();
                 }
                 if(row.getFivebusinessclassseat()!=null){
                     fiveBusinessSeat=row.getFivebusinessclassseat().intValue();
                 }
                 int numberBusinessSeat[]={oneBusinessSeat,twoBusinessSeat,threeBusinessSeat,fourBusinessSeat,fiveBusinessSeat};
                     
                for(int a=0;a<6;a++) {
                    System.out.println("dunhuan = "+startStation+ "+"+endStation);
                    //当前高铁上找到出发点站
                    if(place[a]!=null&&startStation.compareTo(place[a])==0) {
                        System.out.println("enter startStation="+a);
                        for(int b=a+1;b<6;b++){
                            System.out.println("xunhuan = ");
                            //当前高铁上找到目的站说明这条高铁符合条件
                            if(place[b]!=null&&endStation.compareTo(place[b])==0){
                                System.out.println("enter endStation");
                                int serial2=Integer.parseInt(serial);
                                if(serial2==1){
                                    for(int nu=a;nu<b;nu++) {
                                        numberSecondSeat[nu]=numberSecondSeat[nu]-1;
                                        System.out.println("secondseat="+numberSecondSeat[nu]);
                                        
                                    }
                                }
                                else if(serial2==2){
                                    for(int nu1=a;nu1<b;nu1++) {
                                        numberFirstSeat[nu1]=numberFirstSeat[nu1]-1;
                                        
                                    }
                                }else{
                                    for(int nu2=a;nu2<b;nu2++) {
                                         numberBusinessSeat[nu2]=numberBusinessSeat[nu2]-1;
                                    }
                                }
                                
                                //更新二等座的数量
                                Number num_1=new Number(numberSecondSeat[0]);
                                Number num_2=new Number(numberSecondSeat[1]);
                                Number num_3=new Number(numberSecondSeat[2]);
                                Number num_4=new Number(numberSecondSeat[3]);
                                Number num_5=new Number(numberSecondSeat[4]);
                                row.setOnesecondclassseat(num_1);
                                row.setTwosecondclassseat(num_2);
                                row.setThreesecondclassseat(num_3);
                                row.setForesecondclassseat(num_4);
                                row.setFivesecondclassseat(num_5);
                                
                                //更新一等座位置的数量
                                oracle.jbo.domain.Number num2_1=new oracle.jbo.domain.Number(numberFirstSeat[0]);
                                oracle.jbo.domain.Number num2_2=new oracle.jbo.domain.Number(numberFirstSeat[1]);
                                oracle.jbo.domain.Number num2_3=new oracle.jbo.domain.Number(numberFirstSeat[2]);
                                oracle.jbo.domain.Number num2_4=new oracle.jbo.domain.Number(numberFirstSeat[3]);
                                oracle.jbo.domain.Number num2_5=new oracle.jbo.domain.Number(numberFirstSeat[4]);
                                row.setOnefirstclassseat(num2_1);
                                row.setTwofirstclassseat(num2_2);
                                row.setThreefirstclassseat(num2_3);
                                row.setForefirstclassseat(num2_4);
                                row.setFivefirstclassseat(num2_5);
                                
                                //更新商务座位置的数量
                                oracle.jbo.domain.Number num3_1=new oracle.jbo.domain.Number(numberBusinessSeat[0]);
                                oracle.jbo.domain.Number num3_2=new oracle.jbo.domain.Number(numberBusinessSeat[1]);
                                oracle.jbo.domain.Number num3_3=new oracle.jbo.domain.Number(numberBusinessSeat[2]);
                                oracle.jbo.domain.Number num3_4=new oracle.jbo.domain.Number(numberBusinessSeat[3]);
                                oracle.jbo.domain.Number num3_5=new oracle.jbo.domain.Number(numberBusinessSeat[4]);
                                row.setOnebusinessclassseat(num3_1);
                                row.setTwobusinessclassseat(num3_2);
                                row.setThreebusinessclassseat(num3_3);
                                row.setForebusinessclassseat(num3_4);
                                row.setFivebusinessclassseat(num3_5);
                                System.out.println("the number of second Seat after change="+row.getTwosecondclassseat());
                            
                                this.getOADBTransaction().commit(); 
                                break;
                            }
                            
                        }
                            
                            }
                        }         
            }
        }
        
        
        
    }
    
    public void saveOrderedTicket(HashMap parameters){
        String idTrain=(String)parameters.get("idOfTrain");
        String idCustomer=(String)parameters.get("idCustomer");
        String startStation=(String)parameters.get("startStation");
        String endStation=(String)parameters.get("endStation");
        String startTime=(String)parameters.get("startTime");
        String endTime=(String)parameters.get("endTime");
        String serial=(String)parameters.get("serial");
        String nameCustomer=(String)parameters.get("nameCustomer");
        String nameTrain=(String)parameters.get("nameTrain");
        orderedTicketVOImpl orderedTicketVO=(orderedTicketVOImpl)this.getorderedTicketVO1();
        System.out.println("initail go="+nameTrain+" "+startTime);
      
        if(!orderedTicketVO.isPreparedForExecution()) {
            orderedTicketVO.executeQuery();
        }
        orderedTicketVORowImpl rowO=(orderedTicketVORowImpl)orderedTicketVO.createRow();
        int idCustomer2=Integer.parseInt(idCustomer);
        Number idCustomer3=new Number(idCustomer2);
        rowO.setPersonid(idCustomer3);
        int idTrain2=Integer.parseInt(idTrain);
        Number idTrain3=new Number(idTrain2);
        rowO.setTrainid(idTrain3);
        rowO.setTrainname(nameTrain);
        rowO.setEname(nameCustomer);
        rowO.setStartstation(startStation);
        rowO.setEndstation(endStation);
        //直接传进来的String型的startTime和endTime，目前我尝试了几种仍无法将其转换为oracle需要的date，所以改用在数据库中获取时间
         trainVOImpl trainVO=this.gettrainVO1();
         String whereClause=" 1=1 ";
         System.out.println("condition go");
         whereClause+=" AND IDNUM = '"+idTrain+ "' ";
         trainVO.executeQueryPara(whereClause);
         //System.out.println(trainVO.getQuery());
         int fetchedRowCountAfter=trainVO.getFetchedRowCount();
         System.out.println("fetchedRowCountAfter= "+fetchedRowCountAfter);
         int rowCountAfter=trainVO.getRowCount();
         System.out.println("rowCountAfter= "+rowCountAfter);
         
         RowSetIterator deleteIter=trainVO.createRowSetIterator("deleteIter");
         trainVORowImpl row=null;
         if(rowCountAfter>0) {
             System.out.println("execute charge1");
             deleteIter.setRangeStart(0);
             deleteIter.setRangeSize(rowCountAfter);
             for(int i=0;i<rowCountAfter;i++) {
                 System.out.println("execute xunhuan");
                 row=(trainVORowImpl)deleteIter.getRowAtRangeIndex(i);
                 
                 
                 //获得高铁会经过的站台
                 String onePlace=row.getOneplace();
                 String twoPlace=row.getTwoplace();
                 String threePlace=row.getThreeplace();
                 String forePlace=row.getForeplace();
                 String fivePlace=row.getFiveplace();
                 String sixPlace=row.getSixplace();
                 String place[]={onePlace,twoPlace,threePlace,forePlace,fivePlace,sixPlace};
                 
                 //获得在每一个站点的时间
                 Date oneTime=row.getTimeoneplace();
                 Date twoTime=row.getTimetwoplace();
                 Date threeTime=row.getTimethreeplace();
                 Date foreTime=row.getTimeforeplace();
                 Date fiveTime=row.getTimefiveplace();
                 Date sixTime=row.getTimesixplace();
                 Date time[]={oneTime,twoTime,threeTime,foreTime,fiveTime,sixTime};
                 System.out.println("the name of every place="+onePlace+twoPlace+threePlace+forePlace+fivePlace+sixPlace);
                 for(int a=0;a<6;a++) {
                     //当前高铁上找到出发点站
                     if(place[a]!=null&&startStation.compareTo(place[a])==0) {
                         for(int b=a+1;b<6;b++){
                             //当前高铁上找到目的站说明这条高铁符合条件
                             if(place[b]!=null&&endStation.compareTo(place[b])==0){
                             rowO.setStarttime(time[a]);
                             rowO.setEndtime(time[b]);
                             System.out.println("enter double cycle in get"+time[a]);
                             //根据判断得到的数据显示到table中
                             break;
                             }
                         }
                     }
                 }
                     
             }
         }
         
         deleteIter.closeRowSetIterator();
         
        int serial2=Integer.parseInt(serial);
        if(serial2==1) {
            rowO.setSeatclass("二等座");
        }else if(serial2==2){
            rowO.setSeatclass("一等座");
        }else{
            rowO.setSeatclass("商务座");
        }
        System.out.println("is this exectw");
        orderedTicketVO.insertRow(rowO);
        rowO.setNewRowState(orderedTicketVORowImpl.STATUS_NEW);
        //getTransaction().commit();
        this.getOADBTransaction().commit(); 
        
    }

//这是彭杰帮忙写的向数据库中插入一条新的数据，通过调用pl/sql写的包来插入数据，目前这个方法还没有运行，上面那个方法已经能够运行成功了
// public void apply(HashMap parameters)  throws SQLException {
//     String idTrain=(String)parameters.get("idOfTrain");
//     String idCustomer=(String)parameters.get("idCustomer");
//     String startStation=(String)parameters.get("startStation");
//     String endStation=(String)parameters.get("endStation");
//     String startTime=(String)parameters.get("startTime");
//     String endTime=(String)parameters.get("endTime");
//     String serial=(String)parameters.get("serial");
//     String nameCustomer=(String)parameters.get("nameCustomer");
//     String nameTrain=(String)parameters.get("nameTrain");
//     
//     oracle.jdbc.OracleCallableStatement ocs = null;
//      String result = null;
//      String x = null;
//      String sql = "BEGIN :1 := tickettest(:2,:3,:4,:5,:6,:7,:8,:9,:10); END;";
//      try {
//          ocs = (OracleCallableStatement)getDBTransaction().createCallableStatement(sql, 1);
//          ocs.setString(2, idTrain);
//          ocs.setString(3, idCustomer);
//          ocs.setString(4, startStation);
//          ocs.setString(5, endStation);
//          ocs.setString(6, startTime);
//          ocs.setString(7, endTime);
//          ocs.setString(8, serial);
//          ocs.setString(9, nameCustomer);
//          ocs.setString(10, nameTrain);
//          
//          ocs.execute();
//          result = ocs.getString(1);
//      } catch (SQLException e) {
//          e.printStackTrace();
//      } finally {
//          if (ocs != null) {
//              ocs.close();
//          }
//    } 
//     this.getOADBTransaction().commit(); 
// 
// }
    
    public void orderedTicket(HashMap parameter){
        String idCustomer=(String)parameter.get("idCustomer");
        String whereClause=" 1=1 ";
        whereClause+=" AND personId =  '"+idCustomer+ "' "; 
        orderedTicketVOImpl orderedTicketVO=(orderedTicketVOImpl)this.getorderedTicketVO1();
        orderedTicketVO.executeQueryPara(whereClause);
    }
    
    public void personInfo(HashMap parameter){
        String idCustomer=(String)parameter.get("idCustomer");
        String whereClause=" 1=1 ";
        whereClause+=" AND idNum =  '"+idCustomer+ "' "; 
        loginVOImpl loginVO=(loginVOImpl)this.getloginVO1();
        loginVO.executeQueryPara(whereClause);
    }
    
    //退票
    public void backTicket(HashMap parameters) {
        String idNum=(String)parameters.get("idNum");
        String idTrain=(String)parameters.get("idTrain");
        String startStation=(String)parameters.get("startStation");
        String endStation=(String)parameters.get("endStation");
        String seatClass=(String)parameters.get("seatClass");
        
        //删除存入已购票表中的对应数据
        orderedTicketVOImpl orderedTicketVO=(orderedTicketVOImpl)this.getorderedTicketVO1();
        String whereClause2=" 1=1 ";
        whereClause2+=" AND idNum =  '"+idNum+ "' "; 
        orderedTicketVO.executeQueryPara(whereClause2);
        int key=Integer.parseInt(idNum);
        orderedTicketVORowImpl row2=null;
        int fetchedRowCount=orderedTicketVO.getRowCount();
        System.out.println("back hangshu="+fetchedRowCount);
        RowSetIterator deleteIter=orderedTicketVO.createRowSetIterator("deleteIter");
        if(fetchedRowCount>0) {
            deleteIter.setRangeStart(0);
            deleteIter.setRangeSize(fetchedRowCount);
            for(int i=0;i<fetchedRowCount;i++) {
                row2=(orderedTicketVORowImpl)deleteIter.getRowAtRangeIndex(i);
                Number primaryKey=row2.getIdnum();
                if(primaryKey.compareTo(key)==0) {
                    row2.remove();
                    getTransaction().commit();
                    break;
                }
            }
        }
        deleteIter.closeRowSetIterator();
        
        //将所退票车次的相应段的相应座位类型的座位数加一
        String whereClause=" 1=1 ";
        whereClause+=" AND idNum =  '"+idTrain+ "' "; 
        trainVOImpl trainVO=(trainVOImpl)this.gettrainVO1();
        trainVO.executeQueryPara(whereClause);
        //System.out.println("the second query:"+trainVO.getQuery());
        
        //通过getCurrentRow()没有获取到当前行，但是查询语句却能查询到一条数据
        //trainVORowImpl row=(trainVORowImpl)trainVO.getCurrentRow();
        int fetchedRowCountAfter=trainVO.getFetchedRowCount();
        //getFetchedRowCount()也没有获取到行数信息，可能这跟getCurrentRow()适用情况是一样的
        //System.out.println("fetchedRowCountAfter2= "+fetchedRowCountAfter);
        int rowCountAfter=trainVO.getRowCount();
        //System.out.println("rowCountAfter2= "+rowCountAfter);
        
        RowSetIterator del=trainVO.createRowSetIterator("del");
        trainVORowImpl row=null;
        if(rowCountAfter>0) {
            //System.out.println("execute charge1");
            del.setRangeStart(0);
            del.setRangeSize(rowCountAfter);
            for(int i=0;i<rowCountAfter;i++) {
                //System.out.println("execute xunhuan");
                row=(trainVORowImpl)del.getRowAtRangeIndex(i);
                
                 //获得高铁会经过的站台
                 String onePlace=row.getOneplace();
                 String twoPlace=row.getTwoplace();
                 String threePlace=row.getThreeplace();
                 String forePlace=row.getForeplace();
                 String fivePlace=row.getFiveplace();
                 String sixPlace=row.getSixplace();
                 String place[]={onePlace,twoPlace,threePlace,forePlace,fivePlace,sixPlace};
                
                //获得二等座每一段的座位数量
                 int oneSecondSeat=0;
                 int twoSecondSeat=0;
                 int threeSecondSeat=0;
                 int fourSecondSeat=0;
                 int fiveSecondSeat=0;
                 if(row.getOnesecondclassseat()!=null){
                     oneSecondSeat=row.getOnesecondclassseat().intValue();
                 }
                 if(row.getTwosecondclassseat()!=null){
                     twoSecondSeat=row.getTwosecondclassseat().intValue();
                 }
                 if(row.getThreesecondclassseat()!=null){
                     threeSecondSeat=row.getThreesecondclassseat().intValue();
                 }
                 if(row.getForesecondclassseat()!=null){
                     fourSecondSeat=row.getForesecondclassseat().intValue();
                 }
                 if(row.getFivesecondclassseat()!=null){
                     fiveSecondSeat=row.getFivesecondclassseat().intValue();
                 }
                 int numberSecondSeat[]={oneSecondSeat,twoSecondSeat,threeSecondSeat,fourSecondSeat,fiveSecondSeat};
                 
                //获得一等座每一段的座位数量
                 int oneFirstSeat=0;
                 int twoFirstSeat=0;
                 int threeFirstSeat=0;
                 int fourFirstSeat=0;
                 int fiveFirstSeat=0;
                 if(row.getOnefirstclassseat()!=null){
                     oneFirstSeat=row.getOnefirstclassseat().intValue();
                 }
                 if(row.getTwofirstclassseat()!=null){
                     twoFirstSeat=row.getTwofirstclassseat().intValue();
                 }
                 if(row.getThreefirstclassseat()!=null){
                     threeFirstSeat=row.getThreefirstclassseat().intValue();
                 }
                 if(row.getForefirstclassseat()!=null){
                     fourFirstSeat=row.getForefirstclassseat().intValue();
                 }
                 if(row.getFivefirstclassseat()!=null){
                     fiveFirstSeat=row.getFivefirstclassseat().intValue();
                 }
                 int numberFirstSeat[]={oneFirstSeat,twoFirstSeat,threeFirstSeat,fourFirstSeat,fiveFirstSeat};
                 
                //获得商务座每一段的座位数量
                 int oneBusinessSeat=0;
                 int twoBusinessSeat=0;
                 int threeBusinessSeat=0;
                 int fourBusinessSeat=0;
                 int fiveBusinessSeat=0;
                 if(row.getOnebusinessclassseat()!=null){
                     oneBusinessSeat=row.getOnebusinessclassseat().intValue();
                 }
                 if(row.getTwobusinessclassseat()!=null){
                     twoBusinessSeat=row.getTwobusinessclassseat().intValue();
                 }
                 if(row.getThreebusinessclassseat()!=null){
                     threeBusinessSeat=row.getThreebusinessclassseat().intValue();
                 }
                 if(row.getForebusinessclassseat()!=null){
                     fourBusinessSeat=row.getForebusinessclassseat().intValue();
                 }
                 if(row.getFivebusinessclassseat()!=null){
                     fiveBusinessSeat=row.getFivebusinessclassseat().intValue();
                 }
                 int numberBusinessSeat[]={oneBusinessSeat,twoBusinessSeat,threeBusinessSeat,fourBusinessSeat,fiveBusinessSeat};
                     
                for(int a=0;a<6;a++) {
                    System.out.println("dunhuan = "+startStation+ "+"+endStation);
                    //当前高铁上找到出发点站
                    if(place[a]!=null&&startStation.compareTo(place[a])==0) {
                        System.out.println("enter startStation="+a);
                        for(int b=a+1;b<6;b++){
                            System.out.println("xunhuan = ");
                            //当前高铁上找到目的站说明这条高铁符合条件
                            if(place[b]!=null&&endStation.compareTo(place[b])==0){
                                System.out.println("enter endStation");
                                if(seatClass.equals("二等座")){
                                    for(int nu=a;nu<b;nu++) {
                                        numberSecondSeat[nu]=numberSecondSeat[nu]+1;
                                        System.out.println("secondseat="+numberSecondSeat[nu]);
                                        
                                    }
                                }
                                else if(seatClass.equals("一等座")){
                                    for(int nu1=a;nu1<b;nu1++) {
                                        numberFirstSeat[nu1]=numberFirstSeat[nu1]+1;
                                        
                                    }
                                }else{
                                    for(int nu2=a;nu2<b;nu2++) {
                                         numberBusinessSeat[nu2]=numberBusinessSeat[nu2]+1;
                                    }
                                }
                                
                                //更新二等座的数量
                                Number num_1=new Number(numberSecondSeat[0]);
                                Number num_2=new Number(numberSecondSeat[1]);
                                Number num_3=new Number(numberSecondSeat[2]);
                                Number num_4=new Number(numberSecondSeat[3]);
                                Number num_5=new Number(numberSecondSeat[4]);
                                row.setOnesecondclassseat(num_1);
                                row.setTwosecondclassseat(num_2);
                                row.setThreesecondclassseat(num_3);
                                row.setForesecondclassseat(num_4);
                                row.setFivesecondclassseat(num_5);
                                
                                //更新一等座位置的数量
                                oracle.jbo.domain.Number num2_1=new oracle.jbo.domain.Number(numberFirstSeat[0]);
                                oracle.jbo.domain.Number num2_2=new oracle.jbo.domain.Number(numberFirstSeat[1]);
                                oracle.jbo.domain.Number num2_3=new oracle.jbo.domain.Number(numberFirstSeat[2]);
                                oracle.jbo.domain.Number num2_4=new oracle.jbo.domain.Number(numberFirstSeat[3]);
                                oracle.jbo.domain.Number num2_5=new oracle.jbo.domain.Number(numberFirstSeat[4]);
                                row.setOnefirstclassseat(num2_1);
                                row.setTwofirstclassseat(num2_2);
                                row.setThreefirstclassseat(num2_3);
                                row.setForefirstclassseat(num2_4);
                                row.setFivefirstclassseat(num2_5);
                                
                                //更新商务座位置的数量
                                oracle.jbo.domain.Number num3_1=new oracle.jbo.domain.Number(numberBusinessSeat[0]);
                                oracle.jbo.domain.Number num3_2=new oracle.jbo.domain.Number(numberBusinessSeat[1]);
                                oracle.jbo.domain.Number num3_3=new oracle.jbo.domain.Number(numberBusinessSeat[2]);
                                oracle.jbo.domain.Number num3_4=new oracle.jbo.domain.Number(numberBusinessSeat[3]);
                                oracle.jbo.domain.Number num3_5=new oracle.jbo.domain.Number(numberBusinessSeat[4]);
                                row.setOnebusinessclassseat(num3_1);
                                row.setTwobusinessclassseat(num3_2);
                                row.setThreebusinessclassseat(num3_3);
                                row.setForebusinessclassseat(num3_4);
                                row.setFivebusinessclassseat(num3_5);
                                System.out.println("the number of second Seat after change="+row.getTwosecondclassseat());
                            
                                this.getOADBTransaction().commit(); 
                                break;
                            }
                            
                        }
                            
                            }
                        }         
            }
        }
    }


    /**Container's getter for trainVO1
     */
    public trainVOImpl gettrainVO1() {
        return (trainVOImpl)findViewObject("trainVO1");
    }


    /**Container's getter for loginVO1
     */
    public loginVOImpl getloginVO1() {
        return (loginVOImpl)findViewObject("loginVO1");
    }

    /**Container's getter for orderedTicketVO1
     */
    public orderedTicketVOImpl getorderedTicketVO1() {
        return (orderedTicketVOImpl)findViewObject("orderedTicketVO1");
    }
}
